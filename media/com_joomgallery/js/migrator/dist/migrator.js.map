{"version":3,"file":"migrator.js","mappings":";;;UAAA;UACA;;;;;WCDA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,SAAS;AAClB;AACA;AACA;AACA;AACA;AACA,SAAS,UAAU;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,UAAU;AACnB;AACA;AACA;AACA;AACA;AACA,SAAS,UAAU;AACnB;AACA;AACA;AACA;AACA;AACA,SAAS,UAAU;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,SAAS;AACpB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8GAA8G,KAAK;AACnH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,SAAS;AACpB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,oGAAoG;AACtI;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,SAAS;AACpB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4FAA4F,KAAK;AACjG;AACA;AACA;AACA;AACA;AACA,4FAA4F,KAAK;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,SAAS;AACpB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kFAAkF,gBAAgB;AAClG;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,UAAU;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,UAAU;AACvB,aAAa,UAAU;AACvB;AACA,aAAa,UAAU;AACvB,aAAa,qDAAqD,aAAa;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,gFAAgF,SAAS;AACrG;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA,WAAW,mFAAmF,SAAS;AACvG,IAAI;AACJ;AACA,8BAA8B;AAC9B,6BAA6B;AAC7B;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,UAAU;AACvB;AACA,aAAa,UAAU;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,6FAA6F,OAAO;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,UAAU;AACvB,aAAa,qDAAqD,WAAW;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,UAAU;AACvB,aAAa,UAAU;AACvB,aAAa,UAAU;AACvB,aAAa,UAAU;AACvB,aAAa,UAAU;AACvB,aAAa,UAAU;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,YAAY,UAAU;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,UAAU;AACtB,YAAY,UAAU;AACtB,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,YAAY,UAAU;AACtB,YAAY,UAAU;AACtB,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,kDAAkD;AAC3G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,aAAa;AACzB,YAAY,aAAa;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6FAA6F,KAAK;AAClG;AACA;AACA;AACA;AACA;AACA,4FAA4F,KAAK;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,aAAa;AACzB,YAAY,aAAa;AACzB,YAAY,aAAa;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8FAA8F,KAAK;AACnG;AACA;AACA;AACA;AACA;AACA,6FAA6F,KAAK;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mFAAmF,KAAK;AACxF;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,iFAAiF,KAAK;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kFAAkF,KAAK,oBAAoB,WAAW;AACtH;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gFAAgF,KAAK;AACrF;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,8EAA8E,KAAK;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,wEAAwE,KAAK;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://Migrator/webpack/bootstrap","webpack://Migrator/webpack/runtime/define property getters","webpack://Migrator/webpack/runtime/hasOwnProperty shorthand","webpack://Migrator/webpack/runtime/make namespace object","webpack://Migrator/./src/index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// Selectors and settings used by this script\r\nlet typeSelector = 'data-type';\r\nlet formIdTmpl   = 'migrationForm';\r\nlet buttonTmpl   = 'migrationBtn';\r\nlet condTmpl     = 'startCond';\r\nlet step4Btn     = 'step4Btn';\r\nlet tryLimit     = 3;\r\nlet refresh      = false;\r\n\r\n/**\r\n * Storage for migrateables\r\n * @var {Object}  migrateablesList\r\n */\r\nvar migrateablesList = {};\r\n\r\n/**\r\n * Counter of how many times the same migration was tried to perfrom\r\n * @var {Integer}  tryCounter\r\n */\r\nvar tryCounter = 0;\r\n\r\n/**\r\n * State. As long as this state is set to true, the migration will be\r\n * continued automatically regarding the pending queue in the migrateablesList.\r\n * @var {Boolean}  continueState\r\n */\r\nvar continueState = true;\r\n\r\n/**\r\n * State. Set this state to true to stop automatic execution as soon as the next ajax respond comes back.\r\n * @var {Boolean}  forceStop\r\n */\r\nvar forceStop = false;\r\n\r\n/**\r\n * State. Set this state to true if one migration is active.\r\n * @var {Boolean}  migrationActive\r\n */\r\nvar migrationActive = false;\r\n\r\n/**\r\n * Log error messages from the session storage\r\n */\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n  let errorMessage = sessionStorage.getItem('migrationError');\r\n  if (errorMessage) {\r\n    console.error(errorMessage);\r\n    sessionStorage.removeItem('migrationError');\r\n  }\r\n});\r\n\r\n/**\r\n * Adds all completed migrateables to list\r\n * \r\n * @param {Object}  event     Event object\r\n * @param {Object}  element   DOM element object\r\n */\r\nexport let updateMigrateablesList = function() {\r\n  let types = getTypes();\r\n\r\n  // Loop through all migrateables\r\n  Object.keys(types).forEach(type => {\r\n    let formId = formIdTmpl + '-' + type;\r\n    let form   = document.getElementById(formId);\r\n\r\n    if(!form) {\r\n      sessionStorage.setItem('migrationError', `(updateMigrateablesList) Migration form not found for type: ${type}`);\r\n      location.reload();\r\n      return;\r\n    }\r\n\r\n    let migrateable = atob(form.querySelector('[name=\"migrateable\"]').value);\r\n    migrateable = JSON.parse(migrateable);\r\n\r\n    if(migrateable['completed'])\r\n    {\r\n      // Add migrateable in list\r\n      migrateablesList[type] = migrateable;\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Submit the migration task by pressing the button\r\n * \r\n * @param {Object}  event     Event object\r\n * @param {Object}  element   DOM element object\r\n */\r\nexport let submitTask = function(event, element) {\r\n  event.preventDefault();\r\n\r\n  let type   = element.getAttribute(typeSelector);\r\n  let formId = formIdTmpl + '-' + type;\r\n  let task   = element.parentNode.querySelector('[name=\"task\"]').value;\r\n\r\n  if(tryCounter == 0 && refresh && migrationActive) {\r\n    // There is already a migration running\r\n    addLog(Joomla.JText._('COM_JOOMGALLERY_MIGRATION_ALREADY_RUNNING'), type, 'info');\r\n    return;\r\n  }\r\n\r\n  // Set the migration state to true\r\n  migrationActive = true;\r\n\r\n  if(tryCounter == 0) {\r\n    startTask(type, element);\r\n  }  \r\n\r\n  tryCounter = tryCounter + 1;\r\n\r\n  ajax(formId, task)\r\n    .then(res => {\r\n      // Handle the successful result here\r\n      responseHandler(type, res);\r\n\r\n      if(tryCounter >= tryLimit) {\r\n        // We reached the limit of tries --> looks like we have a network problem\r\n        updateMigrateables(type, {'success': false, 'message': Joomla.JText._('COM_JOOMGALLERY_ERROR_NETWORK_PROBLEM'), 'data': false});\r\n        // Stop automatic execution and update GUI\r\n        forceStop = true;\r\n      }\r\n      \r\n      if(continueState && !forceStop) {\r\n        // Kick off the next task\r\n        submitTask(event, element);\r\n      } else {\r\n        // Stop automatic task execution and update GUI\r\n        finishTask(type, element, formId);\r\n      }\r\n    })\r\n    .catch(error => {\r\n      // Handle any errors here\r\n      addLog(error, type, 'error');\r\n\r\n      // Set the migration state to ture\r\n      migrationActive = false;\r\n    });\r\n};\r\n\r\n/**\r\n * Stop the migration task by pressing the button\r\n * \r\n * @param {Object}  event     Event object\r\n * @param {Object}  element   DOM element object\r\n */\r\nexport let stopTask = function(event, element) {\r\n  event.preventDefault();\r\n\r\n  let type     = element.getAttribute(typeSelector);\r\n  let bar      = document.getElementById('progress-'+type);\r\n  let startBtn = document.getElementById('migrationBtn-'+type);\r\n  let stopBtn  = element;\r\n\r\n  if(!bar) {\r\n    sessionStorage.setItem('migrationError', `(stopTask) Progress bar not found for type: ${type}`);\r\n    location.reload();\r\n    return;\r\n  }\r\n\r\n  if(!startBtn) {\r\n    sessionStorage.setItem('migrationError', `(stopTask) Start button not found for type: ${type}`);\r\n    location.reload();\r\n    return;\r\n  }\r\n\r\n  // Force automatic execution to stop\r\n  forceStop = true;\r\n\r\n  // Update progress bar\r\n  bar.classList.remove('progress-bar-striped');\r\n  bar.classList.remove('progress-bar-animated');\r\n  \r\n  // Enable start button\r\n  startBtn.classList.remove('disabled');\r\n  startBtn.removeAttribute('disabled');\r\n\r\n  // Disable stop button\r\n  stopBtn.classList.add('disabled');\r\n  stopBtn.setAttribute('disabled', 'true');\r\n}\r\n\r\n/**\r\n * Manually set one record migration to true\r\n * \r\n * @param {Object}  event     Event object\r\n * @param {Object}  element   DOM element object\r\n */\r\nexport let repairTask = function(event, element) {\r\n  event.preventDefault();\r\n\r\n  // Get relevant elements\r\n  let type      = element.getAttribute(typeSelector);\r\n  let mig       = document.getElementById('migrationForm-'+type).querySelector('[name=\"migrateable\"]');\r\n  let inputType = document.getElementById('migrepairForm').querySelector('[name=\"type\"]');\r\n  let inputMig  = document.getElementById('migrepairForm').querySelector('[name=\"migrateable\"]');\r\n\r\n  // Fill input values\r\n  inputType.value = type;\r\n  inputMig.value  = mig.value;\r\n\r\n  // Show modal\r\n  let bsmodal = new bootstrap.Modal(document.getElementById('repair-modal-box'), {keyboard: false});\r\n  bsmodal.show();\r\n}\r\n\r\n/**\r\n * Get an object with all available types\r\n * \r\n * @returns {Object}   Types object\r\n */\r\nlet getTypes = function() {\r\n  let types_inputs = document.getElementsByName('type');\r\n  let types = {};\r\n\r\n  if(!types_inputs) {\r\n    sessionStorage.setItem('migrationError', `(getTypes) Type elements not found.`);\r\n    location.reload();\r\n    return;\r\n  }\r\n\r\n  // Add all available migrateables to types object\r\n  types_inputs.forEach((type) => {\r\n    if(Boolean(type.value)) {\r\n      types[type.value] = false;\r\n    }\r\n  });\r\n\r\n  return types;\r\n}\r\n\r\n/**\r\n * Perform an ajax request in json format\r\n * \r\n * @param   {String}   formId   Id of the form element\r\n * @param   {String}   task     Name of the task\r\n * \r\n * @returns {Object}   Result object\r\n *          {success: true, status: 200, message: '', messages: {}, data: { { {success, data, continue, error, debug, warning} }}\r\n */\r\nlet ajax = async function(formId, task) {\r\n\r\n  // Catch form and data\r\n  let formData = new FormData(document.getElementById(formId));\r\n  formData.append('format', 'json');\r\n\r\n  if(task == 'migration.start') {\r\n    formData.append('id', getNextMigrationID(formId));\r\n  }\r\n\r\n  // Set request parameters\r\n  let parameters = {\r\n    method: 'POST',\r\n    mode: 'same-origin',\r\n    cache: 'default',\r\n    redirect: 'follow',\r\n    referrerPolicy: 'no-referrer-when-downgrade',\r\n    body: formData,\r\n  };\r\n\r\n  // Set the url\r\n  let url = document.getElementById(formId).getAttribute('action');\r\n\r\n  // Perform the fetch request\r\n  let response = await fetch(url, parameters);\r\n\r\n  // Resolve promise as text string\r\n  let txt = await response.text();\r\n  let res = null;\r\n\r\n  if (!response.ok) {\r\n    // Catch network error\r\n    return {success: false, status: response.status, message: response.message, messages: {}, data: {error: txt, data:null}};\r\n  }\r\n\r\n  if(txt.startsWith('{\"success\"')) {\r\n    // Response is of type json --> everything fine\r\n    res = JSON.parse(txt);\r\n    res.status = response.status;\r\n    res.data   = JSON.parse(res.data);\r\n  } else if (txt.includes('Fatal error')) {\r\n    // PHP fatal error occurred\r\n    res = {success: false, status: response.status, message: response.statusText, messages: {}, data: {error: txt, data:null}};\r\n  } else {\r\n    // Response is not of type json --> probably some php warnings/notices\r\n    let split = txt.split('\\n{\"');\r\n    let temp  = JSON.parse('{\"'+split[1]);\r\n    let data  = JSON.parse(temp.data);\r\n    res = {success: true, status: response.status, message: split[0], messages: temp.messages, data: data};\r\n  }\r\n\r\n  // Make sure res.data.data.queue is of type array\r\n  if(typeof res.data.data != \"undefined\" && res.data.data != null && 'queue' in res.data.data) {\r\n    if(res.data.data.queue.constructor !== Array) {\r\n      res.data.data.queue = Object.values(res.data.data.queue);\r\n    }\r\n  }\r\n\r\n  return res;\r\n}\r\n\r\n/**\r\n * Search for the next migrateable id in the queue\r\n * \r\n * @param   {String}   formId   Id of the form element\r\n * \r\n * @returns {String}   Id of the database record to be migrated next\r\n */\r\nlet getNextMigrationID = function(formId) {\r\n  let type = formId.replace(formIdTmpl + '-', '');\r\n  let form = document.getElementById(formId);\r\n\r\n  if(!form) {\r\n    sessionStorage.setItem('migrationError', `(getNextMigrationID) Form not found with id: ${formId}`);\r\n    location.reload();\r\n    return;\r\n  }\r\n\r\n  // Get migrateables from form\r\n  let migrateable = atob(form.querySelector('[name=\"migrateable\"]').value);\r\n  migrateable     = JSON.parse(migrateable);\r\n\r\n  // Update/overwrite migrateables in list\r\n  migrateablesList[type] = migrateable;\r\n\r\n  // Loop through queue to get next migrateable to be performed\r\n  for (let id of migrateable.queue) {\r\n    if (!(id in migrateable.successful) && !(id in migrateable.failed)) {\r\n      migrateablesList[type]['currentID'] = id;\r\n      break;\r\n    }\r\n  }\r\n\r\n  return migrateablesList[type]['currentID'];\r\n}\r\n\r\n/**\r\n * Handle migration response\r\n * \r\n * @param   {Object}   response   The response object in the form of\r\n *          {success: true, status: 200, message: '', messages: {}, data: { {success, data, continue, error, debug, warning} }}\r\n * \r\n * @returns void\r\n */\r\nlet responseHandler = function(type, response) {\r\n  if(response.success == false)  {\r\n    // Ajax request failed or server responded with error code\r\n    addLog('Error in server response. We will try again. ('+tryCounter+'/'+tryLimit+')', type, 'info');\r\n    addLog(response.message, type, 'error');\r\n    addLog(response.messages, type, 'error');\r\n    addLog(response.data.error, type, 'error');\r\n    \r\n    // Try again...\r\n  }\r\n  else  {\r\n    // Ajax request successful\r\n    if(!response.data.success)\r\n    {\r\n      // Migration failed\r\n      addLog('[Migrator.js] Migration of '+type+' with id = '+migrateablesList[type]['currentID']+' failed.', type, 'error');\r\n      logMessages(type, response.data);\r\n\r\n      // Stop autimatic continuation if requested from backend\r\n      if(!response.data.continue || response.data.continue == null || response.data.continue == false) {\r\n        console.log('Stop automatic continuation requested from backend');\r\n        continueState = false;\r\n      }\r\n\r\n      // Update migrateables\r\n      updateMigrateables(type, response.data);\r\n      \r\n      // Reset tryCounter if we are handling a different migrateable\r\n      if(migrateablesList[type]['currentID'] != migrateablesList[type]['last']) {\r\n        tryCounter = 0;\r\n      }\r\n    }\r\n    else\r\n    {\r\n      // Save record successful\r\n      logMessages(type, response.data);\r\n      addLog('[Migrator.js] Migration of '+type+' with id = '+migrateablesList[type]['currentID']+'  successful.', type, 'success');\r\n\r\n      // Stop autimatic continuation if requested from backend\r\n      if(!response.data.continue || response.data.continue == null || response.data.continue == false) {\r\n        console.log('Stop automatic continuation requested from backend');\r\n        continueState = false;\r\n      }\r\n\r\n      // Update migrateables\r\n      updateMigrateables(type, response.data);\r\n\r\n      // Reset tryCounter\r\n      tryCounter = 0;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Add a message to the logging output and the console\r\n * \r\n * @param   {Mixed}    msg        One or multiple messages to be added to the log\r\n * @param   {String}   type       The type defining the logging output to use\r\n * @param   {String}   msgType    The type of message (available: error, warning, success, info)\r\n * @param   {Boolean}  console    True to add the message also to the console\r\n * @param   {Boolean}  newLine    True to add the message on a new line\r\n * @param   {Integer}  marginTop  Number of how much margin you want on the top of the message\r\n * \r\n * @returns void\r\n */\r\nlet addLog = function(msg, type, msgType, console=false, newLine=true, marginTop=0) {\r\n  if(!Boolean(msg) || msg == null || msg == '') {\r\n    // Message is empty. Do nothing\r\n    return;\r\n  } else if(typeof msg === 'string') {\r\n    // Your message is a simple string\r\n    let tmp_msg = '';\r\n\r\n    // Test if your string a json string\r\n    try {\r\n      tmp_msg = JSON.parse(msg);\r\n    } catch (e) {\r\n    }\r\n\r\n    // Convert string to array\r\n    if(tmp_msg !== '') {\r\n      // remove object properties 'error' and 'code' if existent\r\n      if('error' in tmp_msg) {\r\n        delete tmp_msg.error;\r\n      }\r\n      if('code' in tmp_msg) {\r\n        delete tmp_msg.code;\r\n      }\r\n      msg = Object.values(tmp_msg);\r\n    } else {\r\n      msg = [msg];\r\n    }\r\n  } else if(typeof msg === 'object') {\r\n    // Your message is an object. Convert to array\r\n    msg = Object.values(msg);\r\n  }\r\n\r\n  // Get logging output element\r\n  let logOutput = document.getElementById('logOutput-'+type);\r\n\r\n  // Loop through all messages\r\n  msg.forEach((message, i) => {\r\n    // Print in console\r\n    if(console) {\r\n      console.log(message);\r\n    }\r\n\r\n    // Create element\r\n    let line = null;\r\n    if(newLine) {\r\n      line = document.createElement('p');\r\n    } else {\r\n      line = document.createElement('span');\r\n    }\r\n\r\n    // Top margin to element\r\n    marginTop = parseInt(marginTop);\r\n    if(marginTop > 0) {\r\n      line.classList.add('mt-'+String(marginTop));\r\n    }\r\n\r\n    // Add text color\r\n    line.classList.add('color-'+msgType);\r\n    \r\n    // Add message to element\r\n    let msgType_txt = msgType.toLocaleUpperCase();\r\n    line.textContent = '['+Joomla.JText._(msgType_txt)+']  '+String(message);\r\n\r\n    // Print into logging output\r\n    logOutput.appendChild(line);\r\n  });\r\n}\r\n\r\n/**\r\n * Clear the logging output\r\n *\r\n * @param  {String}   type    The type defining the logging output to clear\r\n * \r\n * @returns void\r\n */\r\nlet clearLog = function(type) {\r\n  // Get logging output element\r\n  let logOutput = document.getElementById('logOutput-'+type);\r\n\r\n  // clear\r\n  logOutput.innerHTML = '';\r\n}\r\n\r\n/**\r\n * Output all available messages from the result object\r\n *\r\n * @param  {String}   type   The type defining the content type to be updated\r\n * @param  {Object}   res    The result object in the form of\r\n *           {success: bool, data: mixed, continue: bool, error: string|array, debug: string|array, warning: string|array}\r\n * \r\n * @returns void\r\n */\r\nlet logMessages = function(type, res) {\r\n  // Available message types: error, debug, warning\r\n  let available = ['error', 'debug', 'warning'];\r\n  let msgTypes = {'error': 'error', 'debug': 'info', 'warning': 'warning'};\r\n\r\n  available.forEach((value, index) => {\r\n    if(!res[value] || !Boolean(res.data) || res.data == null) {\r\n      return;\r\n    }\r\n\r\n    addLog(res[value], type, msgTypes[value]);\r\n  });\r\n}\r\n\r\n/**\r\n * Update migrateable input field, progress bar and badges\r\n *\r\n * @param  {String}   type   The type defining the content type to be updated\r\n * @param  {Object}   res    The result object in the form of\r\n *           {success: bool, data: mixed, continue: bool, error: string|array, debug: string|array, warning: string|array}\r\n * \r\n * @returns void\r\n */\r\nlet updateMigrateables = function(type, res) {\r\n  let formId = formIdTmpl + '-' + type;\r\n  let form   = document.getElementById(formId);\r\n\r\n  if(!res.success && (!Boolean(res.data) || res.data == null || res.data == '')) {\r\n    // Migration failed, but no data available in result\r\n\r\n    // Create result data based on input field\r\n    let migrateable = atob(form.querySelector('[name=\"migrateable\"]').value);\r\n    res.data = JSON.parse(migrateable);\r\n\r\n    // See: Joomgallery\\Component\\Joomgallery\\Administrator\\Model\\MigrationModel::migrate\r\n    // Remove migrated primary key from queue\r\n    res.data.queue = res.data.queue.filter(function(e) { return e !== migrateablesList[type]['currentID'] })\r\n\r\n    // Add migrated primary key to failed object\r\n    res.data.failed[migrateablesList[type]['currentID']] = res.message;\r\n  }\r\n\r\n  if(!Boolean(res.data.progress) || res.data.progress == null || res.data.progress == '') {\r\n    // Update progress if not delivered with result object\r\n    let total    = res.data.queue.lenght + Object.keys(res.data.successful).length + Object.keys(res.data.failed).length;\r\n    let finished = Object.keys(res.data.successful).length + Object.keys(res.data.failed).length;\r\n    res.data.progress = Math.round((100 / total) * (finished));\r\n  }\r\n\r\n  // Get badges\r\n  let queueBadge = document.getElementById('badgeQueue-'+type);\r\n  let resBadge = document.getElementById('badgeSuccessful-'+type);\r\n  if(!res.success) {\r\n    resBadge = document.getElementById('badgeFailed-'+type);\r\n  }\r\n\r\n  // Update migrateable input field\r\n  let field = form.querySelector('[name=\"migrateable\"]');\r\n  field.value = btoa(JSON.stringify(res.data));\r\n\r\n  // Update badges\r\n  queueBadge.innerHTML = parseInt(queueBadge.innerHTML) - 1;\r\n  resBadge.innerHTML   = parseInt(resBadge.innerHTML) + 1;\r\n\r\n  // Update progress bar\r\n  let bar = document.getElementById('progress-'+type);\r\n  bar.setAttribute('aria-valuenow', res.data.progress);\r\n  bar.style.width = res.data.progress + '%';\r\n  bar.innerText = res.data.progress + '%';\r\n}\r\n\r\n/**\r\n * Update GUI to start migration\r\n *\r\n * @param  {String}      type    The type defining the content type to be updated\r\n * @param  {DOM Element} button  The button being pressed to start the task\r\n * \r\n * @returns void\r\n */\r\nlet startTask = function(type, button) {\r\n  let startBtn = button;\r\n  let bar      = document.getElementById('progress-'+type);  \r\n  let stopBtn  = document.getElementById('stopBtn-'+type);\r\n\r\n  if(!bar) {\r\n    sessionStorage.setItem('migrationError', `(startTask) Progress bar not found for type: ${type}`);\r\n    location.reload();\r\n    return;\r\n  }\r\n\r\n  if(!stopBtn) {\r\n    sessionStorage.setItem('migrationError', `(startTask) Stop button not found for type: ${type}`);\r\n    location.reload();\r\n    return;\r\n  }\r\n\r\n  // Update progress bar\r\n  bar.classList.add('progress-bar-striped');\r\n  bar.classList.add('progress-bar-animated');\r\n  \r\n  // Disable start button\r\n  startBtn.classList.add('disabled');\r\n  startBtn.setAttribute('disabled', 'true');\r\n\r\n  // Enable stop button\r\n  stopBtn.classList.remove('disabled');\r\n  stopBtn.removeAttribute('disabled');\r\n\r\n  // Reinitialize variables\r\n  tryCounter    = 0;\r\n  continueState = true;\r\n  forceStop     = false;\r\n}\r\n\r\n/**\r\n * Update GUI to end migration\r\n *\r\n * @param  {String}      type    The type defining the content type to be updated\r\n * @param  {DOM Element} button  The button being pressed to start the task\r\n * @param  {String}      formId  Id of the form element\r\n * \r\n * @returns void\r\n */\r\nlet finishTask = function(type, button, formId) {\r\n  // Set the migration state to ture\r\n  migrationActive = false;\r\n  \r\n  // Get elements\r\n  let startBtn   = button;\r\n  let bar        = document.getElementById('progress-'+type);  \r\n  let stopBtn    = document.getElementById('stopBtn-'+type);\r\n\r\n  if(!bar) {\r\n    sessionStorage.setItem('migrationError', `(finishTask) Progress bar not found for type: ${type}`);\r\n    location.reload();\r\n    return;\r\n  }\r\n\r\n  if(!stopBtn) {\r\n    sessionStorage.setItem('migrationError', `(finishTask) Stop button not found for type: ${type}`);\r\n    location.reload();\r\n    return;\r\n  }\r\n\r\n  // Update migrateablesList\r\n  getNextMigrationID(formId);\r\n\r\n  // Update progress bar\r\n  bar.classList.remove('progress-bar-striped');\r\n  bar.classList.remove('progress-bar-animated');\r\n\r\n  // If migration is completed\r\n  if(migrateablesList[type] && migrateablesList[type]['completed']) {\r\n    if(refresh) {\r\n      location.reload();\r\n    } else {\r\n      // Update start buttons\r\n      updateStartBtns();\r\n      // Update conditions texts\r\n      updateConditionTxt();\r\n      // Update step 4 button\r\n      updateStep4Btn();\r\n    }\r\n  }\r\n\r\n  // Enable start button\r\n  if(!migrateablesList[type] || !migrateablesList[type]['completed']) {\r\n    // Only enable start button if migration is not finished\r\n    startBtn.classList.remove('disabled');\r\n    startBtn.removeAttribute('disabled');\r\n  }\r\n\r\n  // Disable stop button\r\n  stopBtn.classList.add('disabled');\r\n  stopBtn.setAttribute('disabled', 'true');\r\n}\r\n\r\n/**\r\n * Update state of start conditions text color\r\n * \r\n * @returns void\r\n */\r\nlet updateConditionTxt = function() {\r\n  let types  = getTypes();\r\n  let errors = [];\r\n\r\n  // Loop through all migrateables\r\n  Object.keys(types).forEach(type => {\r\n    let dependenciesElement = document.getElementById('is_dependent-' + type);\r\n    if (!dependenciesElement) {\r\n      errors.push(`(updateConditionTxt) Dependencies element not found for type: ${type}`);\r\n    }\r\n\r\n    let dependencies;\r\n    try {\r\n      dependencies = JSON.parse(dependenciesElement.innerHTML);\r\n    } catch (e) {\r\n      errors.push(`(updateConditionTxt) Invalid JSON in dependencies for type: ${type}`);\r\n    }\r\n\r\n    // Check if all dependencies are migrated\r\n    Object.values(dependencies).forEach(dependency => {\r\n      // Get condition html element\r\n      let condition  = document.getElementById(condTmpl + '-' + type).querySelectorAll('[data-type=\"' + dependency + '\"]')[0];\r\n      if (!condition) {\r\n        errors.push(`(updateConditionTxt) Condition element not found for type '${type}' and dependency '${dependency}'`);\r\n      }\r\n\r\n      if(migrateablesList[dependency] && migrateablesList[dependency]['completed']) {\r\n        // fulfilled\r\n        condition.classList.remove('pending');\r\n        condition.classList.add('fulfilled');\r\n      } else {\r\n        // not fulfilled\r\n        condition.classList.remove('fulfilled');\r\n        condition.classList.add('pending');\r\n      }\r\n    });\r\n  });\r\n\r\n  // Handle errors after loop\r\n  if (errors.length > 0) {\r\n    sessionStorage.setItem('migrationErrors', JSON.stringify(errors));\r\n    location.reload();\r\n  }\r\n}\r\n\r\n/**\r\n * Update state of start buttons\r\n * \r\n * @returns void\r\n */\r\nlet updateStartBtns = function() {\r\n  let types  = getTypes();\r\n  let errors = [];\r\n\r\n  // Loop through all migrateables\r\n  Object.keys(types).forEach(type => {\r\n    let dependenciesElement = document.getElementById('is_dependent-' + type);\r\n    if (!dependenciesElement) {\r\n      errors.push(`(updateStartBtns) Dependencies element not found for type: ${type}`);\r\n    }\r\n\r\n    let dependencies;\r\n    try {\r\n      dependencies = JSON.parse(dependenciesElement.innerHTML);\r\n    } catch (e) {\r\n      errors.push(`(updateStartBtns) Invalid JSON in dependencies for type: ${type}`);\r\n    }\r\n\r\n    // Check if all dependencies are migrated\r\n    let dependenciesMigrated = true;\r\n    Object.values(dependencies).forEach(dependency => {\r\n      if (!migrateablesList[dependency] || !migrateablesList[dependency]['completed']) {\r\n        dependenciesMigrated = false;\r\n      }\r\n    });\r\n\r\n    // Get button\r\n    let btn = document.getElementById(buttonTmpl + '-' + type);\r\n    if (!btn) {\r\n      errors.push(`(updateStartBtns) Start button not found for type: ${type}`);\r\n    }\r\n\r\n    if(dependenciesMigrated && (!migrateablesList[type] || !migrateablesList[type]['completed'])) {\r\n      // Enable button\r\n      btn.classList.remove('disabled');\r\n      btn.removeAttribute('disabled');\r\n    } else {\r\n      // Disable button\r\n      btn.classList.add('disabled');\r\n      btn.setAttribute('disabled', 'true');\r\n    }\r\n  });\r\n\r\n  // Handle errors after loop\r\n  if (errors.length > 0) {\r\n    sessionStorage.setItem('migrationErrors', JSON.stringify(errors));\r\n    location.reload();\r\n  }\r\n}\r\n\r\n/**\r\n * Update button to go to step 4\r\n * \r\n * @returns void\r\n */\r\nlet updateStep4Btn = function() {\r\n  let types = getTypes();\r\n\r\n  // Check if all migrateables are available and completed\r\n  let totComplete = true;\r\n  Object.keys(types).forEach(type => {\r\n    if(Boolean(migrateablesList[type])) {\r\n      if(!migrateablesList[type]['completed'])\r\n      {\r\n        // Migrateable not yet completed\r\n        totComplete = false;\r\n      }\r\n    }\r\n    else\r\n    {\r\n      // Migrateable does not yet exist. Thus not completed\r\n      totComplete = false;\r\n    }\r\n  });\r\n\r\n  if(totComplete) {\r\n    // Get button\r\n    let btn = document.getElementById(step4Btn);\r\n    if (!btn) {\r\n      sessionStorage.setItem('migrationError', `(updateStep4Btn) End Button not found`);\r\n      location.reload();\r\n      return;\r\n    }\r\n\r\n    // Enable step 4 button\r\n    btn.classList.remove('disabled');\r\n    btn.removeAttribute('disabled');\r\n  }\r\n}\r\n"],"names":[],"sourceRoot":""}
